{"id":"node_modules/orderedmap/index.js","dependencies":[{"name":"/home/hacktivate/Phase2/portfolio-2/mini-wp/client/package.json","includedInParent":true,"mtime":1568610328724},{"name":"/home/hacktivate/Phase2/portfolio-2/mini-wp/client/node_modules/orderedmap/package.json","includedInParent":true,"mtime":1568519961015}],"generated":{"js":"// ::- Persistent data structure representing an ordered mapping from\n// strings to values, with some convenient update methods.\nfunction OrderedMap(content) {\n  this.content = content\n}\n\nOrderedMap.prototype = {\n  constructor: OrderedMap,\n\n  find: function(key) {\n    for (var i = 0; i < this.content.length; i += 2)\n      if (this.content[i] === key) return i\n    return -1\n  },\n\n  // :: (string) → ?any\n  // Retrieve the value stored under `key`, or return undefined when\n  // no such key exists.\n  get: function(key) {\n    var found = this.find(key)\n    return found == -1 ? undefined : this.content[found + 1]\n  },\n\n  // :: (string, any, ?string) → OrderedMap\n  // Create a new map by replacing the value of `key` with a new\n  // value, or adding a binding to the end of the map. If `newKey` is\n  // given, the key of the binding will be replaced with that key.\n  update: function(key, value, newKey) {\n    var self = newKey && newKey != key ? this.remove(newKey) : this\n    var found = self.find(key), content = self.content.slice()\n    if (found == -1) {\n      content.push(newKey || key, value)\n    } else {\n      content[found + 1] = value\n      if (newKey) content[found] = newKey\n    }\n    return new OrderedMap(content)\n  },\n\n  // :: (string) → OrderedMap\n  // Return a map with the given key removed, if it existed.\n  remove: function(key) {\n    var found = this.find(key)\n    if (found == -1) return this\n    var content = this.content.slice()\n    content.splice(found, 2)\n    return new OrderedMap(content)\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the start of the map.\n  addToStart: function(key, value) {\n    return new OrderedMap([key, value].concat(this.remove(key).content))\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the end of the map.\n  addToEnd: function(key, value) {\n    var content = this.remove(key).content.slice()\n    content.push(key, value)\n    return new OrderedMap(content)\n  },\n\n  // :: (string, string, any) → OrderedMap\n  // Add a key after the given key. If `place` is not found, the new\n  // key is added to the end.\n  addBefore: function(place, key, value) {\n    var without = this.remove(key), content = without.content.slice()\n    var found = without.find(place)\n    content.splice(found == -1 ? content.length : found, 0, key, value)\n    return new OrderedMap(content)\n  },\n\n  // :: ((key: string, value: any))\n  // Call the given function for each key/value pair in the map, in\n  // order.\n  forEach: function(f) {\n    for (var i = 0; i < this.content.length; i += 2)\n      f(this.content[i], this.content[i + 1])\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by prepending the keys in this map that don't\n  // appear in `map` before the keys in `map`.\n  prepend: function(map) {\n    map = OrderedMap.from(map)\n    if (!map.size) return this\n    return new OrderedMap(map.content.concat(this.subtract(map).content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by appending the keys in this map that don't\n  // appear in `map` after the keys in `map`.\n  append: function(map) {\n    map = OrderedMap.from(map)\n    if (!map.size) return this\n    return new OrderedMap(this.subtract(map).content.concat(map.content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a map containing all the keys in this map that don't\n  // appear in `map`.\n  subtract: function(map) {\n    var result = this\n    map = OrderedMap.from(map)\n    for (var i = 0; i < map.content.length; i += 2)\n      result = result.remove(map.content[i])\n    return result\n  },\n\n  // :: number\n  // The amount of keys in this map.\n  get size() {\n    return this.content.length >> 1\n  }\n}\n\n// :: (?union<Object, OrderedMap>) → OrderedMap\n// Return a map with the given content. If null, create an empty\n// map. If given an ordered map, return that map itself. If given an\n// object, create a map from the object's properties.\nOrderedMap.from = function(value) {\n  if (value instanceof OrderedMap) return value\n  var content = []\n  if (value) for (var prop in value) content.push(prop, value[prop])\n  return new OrderedMap(content)\n}\n\nmodule.exports = OrderedMap\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/orderedmap/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/orderedmap/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}}],"sources":{"node_modules/orderedmap/index.js":"// ::- Persistent data structure representing an ordered mapping from\n// strings to values, with some convenient update methods.\nfunction OrderedMap(content) {\n  this.content = content\n}\n\nOrderedMap.prototype = {\n  constructor: OrderedMap,\n\n  find: function(key) {\n    for (var i = 0; i < this.content.length; i += 2)\n      if (this.content[i] === key) return i\n    return -1\n  },\n\n  // :: (string) → ?any\n  // Retrieve the value stored under `key`, or return undefined when\n  // no such key exists.\n  get: function(key) {\n    var found = this.find(key)\n    return found == -1 ? undefined : this.content[found + 1]\n  },\n\n  // :: (string, any, ?string) → OrderedMap\n  // Create a new map by replacing the value of `key` with a new\n  // value, or adding a binding to the end of the map. If `newKey` is\n  // given, the key of the binding will be replaced with that key.\n  update: function(key, value, newKey) {\n    var self = newKey && newKey != key ? this.remove(newKey) : this\n    var found = self.find(key), content = self.content.slice()\n    if (found == -1) {\n      content.push(newKey || key, value)\n    } else {\n      content[found + 1] = value\n      if (newKey) content[found] = newKey\n    }\n    return new OrderedMap(content)\n  },\n\n  // :: (string) → OrderedMap\n  // Return a map with the given key removed, if it existed.\n  remove: function(key) {\n    var found = this.find(key)\n    if (found == -1) return this\n    var content = this.content.slice()\n    content.splice(found, 2)\n    return new OrderedMap(content)\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the start of the map.\n  addToStart: function(key, value) {\n    return new OrderedMap([key, value].concat(this.remove(key).content))\n  },\n\n  // :: (string, any) → OrderedMap\n  // Add a new key to the end of the map.\n  addToEnd: function(key, value) {\n    var content = this.remove(key).content.slice()\n    content.push(key, value)\n    return new OrderedMap(content)\n  },\n\n  // :: (string, string, any) → OrderedMap\n  // Add a key after the given key. If `place` is not found, the new\n  // key is added to the end.\n  addBefore: function(place, key, value) {\n    var without = this.remove(key), content = without.content.slice()\n    var found = without.find(place)\n    content.splice(found == -1 ? content.length : found, 0, key, value)\n    return new OrderedMap(content)\n  },\n\n  // :: ((key: string, value: any))\n  // Call the given function for each key/value pair in the map, in\n  // order.\n  forEach: function(f) {\n    for (var i = 0; i < this.content.length; i += 2)\n      f(this.content[i], this.content[i + 1])\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by prepending the keys in this map that don't\n  // appear in `map` before the keys in `map`.\n  prepend: function(map) {\n    map = OrderedMap.from(map)\n    if (!map.size) return this\n    return new OrderedMap(map.content.concat(this.subtract(map).content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a new map by appending the keys in this map that don't\n  // appear in `map` after the keys in `map`.\n  append: function(map) {\n    map = OrderedMap.from(map)\n    if (!map.size) return this\n    return new OrderedMap(this.subtract(map).content.concat(map.content))\n  },\n\n  // :: (union<Object, OrderedMap>) → OrderedMap\n  // Create a map containing all the keys in this map that don't\n  // appear in `map`.\n  subtract: function(map) {\n    var result = this\n    map = OrderedMap.from(map)\n    for (var i = 0; i < map.content.length; i += 2)\n      result = result.remove(map.content[i])\n    return result\n  },\n\n  // :: number\n  // The amount of keys in this map.\n  get size() {\n    return this.content.length >> 1\n  }\n}\n\n// :: (?union<Object, OrderedMap>) → OrderedMap\n// Return a map with the given content. If null, create an empty\n// map. If given an ordered map, return that map itself. If given an\n// object, create a map from the object's properties.\nOrderedMap.from = function(value) {\n  if (value instanceof OrderedMap) return value\n  var content = []\n  if (value) for (var prop in value) content.push(prop, value[prop])\n  return new OrderedMap(content)\n}\n\nmodule.exports = OrderedMap\n"},"lineCount":130}},"error":null,"hash":"1fab444e4a2fc978231d281a852260ee","cacheData":{"env":{}}}