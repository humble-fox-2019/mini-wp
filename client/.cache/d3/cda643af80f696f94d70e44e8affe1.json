{"id":"node_modules/rope-sequence/dist/index.js","dependencies":[{"name":"/home/hacktivate/Phase2/portfolio-2/mini-wp/client/package.json","includedInParent":true,"mtime":1568610328724},{"name":"/home/hacktivate/Phase2/portfolio-2/mini-wp/client/node_modules/rope-sequence/package.json","includedInParent":true,"mtime":1568521118366}],"generated":{"js":"var GOOD_LEAF_SIZE = 200\n\n// :: class<T> A rope sequence is a persistent sequence data structure\n// that supports appending, prepending, and slicing without doing a\n// full copy. It is represented as a mostly-balanced tree.\nvar RopeSequence = function RopeSequence () {};\n\nRopeSequence.prototype.append = function append (other) {\n  if (!other.length) { return this }\n  other = RopeSequence.from(other)\n\n  return (!this.length && other) ||\n    (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||\n    (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||\n    this.appendInner(other)\n};\n\n// :: (union<[T], RopeSequence<T>>) → RopeSequence<T>\n// Prepend an array or other rope to this one, returning a new rope.\nRopeSequence.prototype.prepend = function prepend (other) {\n  if (!other.length) { return this }\n  return RopeSequence.from(other).append(this)\n};\n\nRopeSequence.prototype.appendInner = function appendInner (other) {\n  return new Append(this, other)\n};\n\n// :: (?number, ?number) → RopeSequence<T>\n// Create a rope repesenting a sub-sequence of this rope.\nRopeSequence.prototype.slice = function slice (from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  if (from >= to) { return RopeSequence.empty }\n  return this.sliceInner(Math.max(0, from), Math.min(this.length, to))\n};\n\n// :: (number) → T\n// Retrieve the element at the given position from this rope.\nRopeSequence.prototype.get = function get (i) {\n  if (i < 0 || i >= this.length) { return undefined }\n  return this.getInner(i)\n};\n\n// :: ((element: T, index: number) → ?bool, ?number, ?number)\n// Call the given function for each element between the given\n// indices. This tends to be more efficient than looping over the\n// indices and calling `get`, because it doesn't have to descend the\n// tree for every element.\nRopeSequence.prototype.forEach = function forEach (f, from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  if (from <= to)\n    { this.forEachInner(f, from, to, 0) }\n  else\n    { this.forEachInvertedInner(f, from, to, 0) }\n};\n\n// :: ((element: T, index: number) → U, ?number, ?number) → [U]\n// Map the given functions over the elements of the rope, producing\n// a flat array.\nRopeSequence.prototype.map = function map (f, from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  var result = []\n  this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to)\n  return result\n};\n\n// :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>\n// Create a rope representing the given array, or return the rope\n// itself if a rope was given.\nRopeSequence.from = function from (values) {\n  if (values instanceof RopeSequence) { return values }\n  return values && values.length ? new Leaf(values) : RopeSequence.empty\n};\n\nvar Leaf = (function (RopeSequence) {\n  function Leaf(values) {\n    RopeSequence.call(this)\n    this.values = values\n  }\n\n  if ( RopeSequence ) Leaf.__proto__ = RopeSequence;\n  Leaf.prototype = Object.create( RopeSequence && RopeSequence.prototype );\n  Leaf.prototype.constructor = Leaf;\n\n  var prototypeAccessors = { length: {},depth: {} };\n\n  Leaf.prototype.flatten = function flatten () {\n    return this.values\n  };\n\n  Leaf.prototype.sliceInner = function sliceInner (from, to) {\n    if (from == 0 && to == this.length) { return this }\n    return new Leaf(this.values.slice(from, to))\n  };\n\n  Leaf.prototype.getInner = function getInner (i) {\n    return this.values[i]\n  };\n\n  Leaf.prototype.forEachInner = function forEachInner (f, from, to, start) {\n    var this$1 = this;\n\n    for (var i = from; i < to; i++)\n      { if (f(this$1.values[i], start + i) === false) { return false } }\n  };\n\n  Leaf.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {\n    var this$1 = this;\n\n    for (var i = from - 1; i >= to; i--)\n      { if (f(this$1.values[i], start + i) === false) { return false } }\n  };\n\n  Leaf.prototype.leafAppend = function leafAppend (other) {\n    if (this.length + other.length <= GOOD_LEAF_SIZE)\n      { return new Leaf(this.values.concat(other.flatten())) }\n  };\n\n  Leaf.prototype.leafPrepend = function leafPrepend (other) {\n    if (this.length + other.length <= GOOD_LEAF_SIZE)\n      { return new Leaf(other.flatten().concat(this.values)) }\n  };\n\n  prototypeAccessors.length.get = function () { return this.values.length };\n\n  prototypeAccessors.depth.get = function () { return 0 };\n\n  Object.defineProperties( Leaf.prototype, prototypeAccessors );\n\n  return Leaf;\n}(RopeSequence));\n\n// :: RopeSequence\n// The empty rope sequence.\nRopeSequence.empty = new Leaf([])\n\nvar Append = (function (RopeSequence) {\n  function Append(left, right) {\n    RopeSequence.call(this)\n    this.left = left\n    this.right = right\n    this.length = left.length + right.length\n    this.depth = Math.max(left.depth, right.depth) + 1\n  }\n\n  if ( RopeSequence ) Append.__proto__ = RopeSequence;\n  Append.prototype = Object.create( RopeSequence && RopeSequence.prototype );\n  Append.prototype.constructor = Append;\n\n  Append.prototype.flatten = function flatten () {\n    return this.left.flatten().concat(this.right.flatten())\n  };\n\n  Append.prototype.getInner = function getInner (i) {\n    return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length)\n  };\n\n  Append.prototype.forEachInner = function forEachInner (f, from, to, start) {\n    var leftLen = this.left.length\n    if (from < leftLen &&\n        this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false)\n      { return false }\n    if (to > leftLen &&\n        this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false)\n      { return false }\n  };\n\n  Append.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {\n    var leftLen = this.left.length\n    if (from > leftLen &&\n        this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false)\n      { return false }\n    if (to < leftLen &&\n        this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false)\n      { return false }\n  };\n\n  Append.prototype.sliceInner = function sliceInner (from, to) {\n    if (from == 0 && to == this.length) { return this }\n    var leftLen = this.left.length\n    if (to <= leftLen) { return this.left.slice(from, to) }\n    if (from >= leftLen) { return this.right.slice(from - leftLen, to - leftLen) }\n    return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen))\n  };\n\n  Append.prototype.leafAppend = function leafAppend (other) {\n    var inner = this.right.leafAppend(other)\n    if (inner) { return new Append(this.left, inner) }\n  };\n\n  Append.prototype.leafPrepend = function leafPrepend (other) {\n    var inner = this.left.leafPrepend(other)\n    if (inner) { return new Append(inner, this.right) }\n  };\n\n  Append.prototype.appendInner = function appendInner (other) {\n    if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1)\n      { return new Append(this.left, new Append(this.right, other)) }\n    return new Append(this, other)\n  };\n\n  return Append;\n}(RopeSequence));\n\nmodule.exports = RopeSequence\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/rope-sequence/dist/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}}],"sources":{"node_modules/rope-sequence/dist/index.js":"var GOOD_LEAF_SIZE = 200\n\n// :: class<T> A rope sequence is a persistent sequence data structure\n// that supports appending, prepending, and slicing without doing a\n// full copy. It is represented as a mostly-balanced tree.\nvar RopeSequence = function RopeSequence () {};\n\nRopeSequence.prototype.append = function append (other) {\n  if (!other.length) { return this }\n  other = RopeSequence.from(other)\n\n  return (!this.length && other) ||\n    (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||\n    (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||\n    this.appendInner(other)\n};\n\n// :: (union<[T], RopeSequence<T>>) → RopeSequence<T>\n// Prepend an array or other rope to this one, returning a new rope.\nRopeSequence.prototype.prepend = function prepend (other) {\n  if (!other.length) { return this }\n  return RopeSequence.from(other).append(this)\n};\n\nRopeSequence.prototype.appendInner = function appendInner (other) {\n  return new Append(this, other)\n};\n\n// :: (?number, ?number) → RopeSequence<T>\n// Create a rope repesenting a sub-sequence of this rope.\nRopeSequence.prototype.slice = function slice (from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  if (from >= to) { return RopeSequence.empty }\n  return this.sliceInner(Math.max(0, from), Math.min(this.length, to))\n};\n\n// :: (number) → T\n// Retrieve the element at the given position from this rope.\nRopeSequence.prototype.get = function get (i) {\n  if (i < 0 || i >= this.length) { return undefined }\n  return this.getInner(i)\n};\n\n// :: ((element: T, index: number) → ?bool, ?number, ?number)\n// Call the given function for each element between the given\n// indices. This tends to be more efficient than looping over the\n// indices and calling `get`, because it doesn't have to descend the\n// tree for every element.\nRopeSequence.prototype.forEach = function forEach (f, from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  if (from <= to)\n    { this.forEachInner(f, from, to, 0) }\n  else\n    { this.forEachInvertedInner(f, from, to, 0) }\n};\n\n// :: ((element: T, index: number) → U, ?number, ?number) → [U]\n// Map the given functions over the elements of the rope, producing\n// a flat array.\nRopeSequence.prototype.map = function map (f, from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  var result = []\n  this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to)\n  return result\n};\n\n// :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>\n// Create a rope representing the given array, or return the rope\n// itself if a rope was given.\nRopeSequence.from = function from (values) {\n  if (values instanceof RopeSequence) { return values }\n  return values && values.length ? new Leaf(values) : RopeSequence.empty\n};\n\nvar Leaf = (function (RopeSequence) {\n  function Leaf(values) {\n    RopeSequence.call(this)\n    this.values = values\n  }\n\n  if ( RopeSequence ) Leaf.__proto__ = RopeSequence;\n  Leaf.prototype = Object.create( RopeSequence && RopeSequence.prototype );\n  Leaf.prototype.constructor = Leaf;\n\n  var prototypeAccessors = { length: {},depth: {} };\n\n  Leaf.prototype.flatten = function flatten () {\n    return this.values\n  };\n\n  Leaf.prototype.sliceInner = function sliceInner (from, to) {\n    if (from == 0 && to == this.length) { return this }\n    return new Leaf(this.values.slice(from, to))\n  };\n\n  Leaf.prototype.getInner = function getInner (i) {\n    return this.values[i]\n  };\n\n  Leaf.prototype.forEachInner = function forEachInner (f, from, to, start) {\n    var this$1 = this;\n\n    for (var i = from; i < to; i++)\n      { if (f(this$1.values[i], start + i) === false) { return false } }\n  };\n\n  Leaf.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {\n    var this$1 = this;\n\n    for (var i = from - 1; i >= to; i--)\n      { if (f(this$1.values[i], start + i) === false) { return false } }\n  };\n\n  Leaf.prototype.leafAppend = function leafAppend (other) {\n    if (this.length + other.length <= GOOD_LEAF_SIZE)\n      { return new Leaf(this.values.concat(other.flatten())) }\n  };\n\n  Leaf.prototype.leafPrepend = function leafPrepend (other) {\n    if (this.length + other.length <= GOOD_LEAF_SIZE)\n      { return new Leaf(other.flatten().concat(this.values)) }\n  };\n\n  prototypeAccessors.length.get = function () { return this.values.length };\n\n  prototypeAccessors.depth.get = function () { return 0 };\n\n  Object.defineProperties( Leaf.prototype, prototypeAccessors );\n\n  return Leaf;\n}(RopeSequence));\n\n// :: RopeSequence\n// The empty rope sequence.\nRopeSequence.empty = new Leaf([])\n\nvar Append = (function (RopeSequence) {\n  function Append(left, right) {\n    RopeSequence.call(this)\n    this.left = left\n    this.right = right\n    this.length = left.length + right.length\n    this.depth = Math.max(left.depth, right.depth) + 1\n  }\n\n  if ( RopeSequence ) Append.__proto__ = RopeSequence;\n  Append.prototype = Object.create( RopeSequence && RopeSequence.prototype );\n  Append.prototype.constructor = Append;\n\n  Append.prototype.flatten = function flatten () {\n    return this.left.flatten().concat(this.right.flatten())\n  };\n\n  Append.prototype.getInner = function getInner (i) {\n    return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length)\n  };\n\n  Append.prototype.forEachInner = function forEachInner (f, from, to, start) {\n    var leftLen = this.left.length\n    if (from < leftLen &&\n        this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false)\n      { return false }\n    if (to > leftLen &&\n        this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false)\n      { return false }\n  };\n\n  Append.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {\n    var leftLen = this.left.length\n    if (from > leftLen &&\n        this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false)\n      { return false }\n    if (to < leftLen &&\n        this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false)\n      { return false }\n  };\n\n  Append.prototype.sliceInner = function sliceInner (from, to) {\n    if (from == 0 && to == this.length) { return this }\n    var leftLen = this.left.length\n    if (to <= leftLen) { return this.left.slice(from, to) }\n    if (from >= leftLen) { return this.right.slice(from - leftLen, to - leftLen) }\n    return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen))\n  };\n\n  Append.prototype.leafAppend = function leafAppend (other) {\n    var inner = this.right.leafAppend(other)\n    if (inner) { return new Append(this.left, inner) }\n  };\n\n  Append.prototype.leafPrepend = function leafPrepend (other) {\n    var inner = this.left.leafPrepend(other)\n    if (inner) { return new Append(inner, this.right) }\n  };\n\n  Append.prototype.appendInner = function appendInner (other) {\n    if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1)\n      { return new Append(this.left, new Append(this.right, other)) }\n    return new Append(this, other)\n  };\n\n  return Append;\n}(RopeSequence));\n\nmodule.exports = RopeSequence\n"},"lineCount":212}},"error":null,"hash":"14ed853751f7c0d684a2c0d12287bbd8","cacheData":{"env":{}}}